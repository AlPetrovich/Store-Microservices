spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

server.port=8081

#eureka---
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=order-service

#actuator properties
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.health.show-details=always

#Resilience4j properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

#Circuit breaker se activa mediante contador de eventos
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED

#Numero de llamadas que tienen que fallar para pasar al estado OPEN
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5

#Porcentaje de fallas que causara el circuit breaker para pasar al estado OPEN
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50

#Luego de 5 segundos en el estado open, automaticamente pasa al estado half-open
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

#Numero de llamadas que permitimos en el estado half-open, si falla mas del 50% vuelve al estado open
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3

#El circuit breaker esperara a la primer llamada luego de cumplir el tiempo de espera para pasar al estado half-open
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties
#Numero de intentos que se realizaran antes de fallar, incluyendo el primer intento
resilience4j.retry.instances.inventory.max-attempts=3
#Tiempo de espera entre intentos
resilience4j.retry.instances.inventory.wait-duration=5s

## Zipkin properties
spring.zipkin.base-url=http://localhost:9411
spring.sleuth.sampler.probability=1.0

## Kafka properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
# como serializar la clave en particular y enviarla al kafka broker
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

##propiedad para manear evento de orden con el de notificacion
spring.kafka.producer.properties.spring.json.type.mapping=event:com.microservice.event.OrderPlacedEvent

